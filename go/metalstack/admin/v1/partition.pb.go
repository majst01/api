// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: metalstack/admin/v1/partition.proto

package adminv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/metal-stack/api/go/metalstack/api/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PartitionServiceCreateRequest is the request payload for a partition create request
type PartitionServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition the partition
	Partition     *v1.Partition `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceCreateRequest) Reset() {
	*x = PartitionServiceCreateRequest{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceCreateRequest) ProtoMessage() {}

func (x *PartitionServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*PartitionServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionServiceCreateRequest) GetPartition() *v1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

// PartitionServiceUpdateRequest is the request payload for a partition update request
type PartitionServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the partition to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PartitionBootConfiguration defines how metal-hammer boots
	BootConfiguration *v1.PartitionBootConfiguration `protobuf:"bytes,5,opt,name=boot_configuration,json=bootConfiguration,proto3" json:"boot_configuration,omitempty"`
	// DNSServers for this partition
	DnsServer []*v1.DNSServer `protobuf:"bytes,6,rep,name=dns_server,json=dnsServer,proto3" json:"dns_server,omitempty"`
	// NTPServers for this partition
	NtpServer []*v1.NTPServer `protobuf:"bytes,7,rep,name=ntp_server,json=ntpServer,proto3" json:"ntp_server,omitempty"`
	// Tags on this partition
	Tags          []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceUpdateRequest) Reset() {
	*x = PartitionServiceUpdateRequest{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceUpdateRequest) ProtoMessage() {}

func (x *PartitionServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*PartitionServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionServiceUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartitionServiceUpdateRequest) GetBootConfiguration() *v1.PartitionBootConfiguration {
	if x != nil {
		return x.BootConfiguration
	}
	return nil
}

func (x *PartitionServiceUpdateRequest) GetDnsServer() []*v1.DNSServer {
	if x != nil {
		return x.DnsServer
	}
	return nil
}

func (x *PartitionServiceUpdateRequest) GetNtpServer() []*v1.NTPServer {
	if x != nil {
		return x.NtpServer
	}
	return nil
}

func (x *PartitionServiceUpdateRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// PartitionServiceDeleteRequest is the request payload for a partition delete request
type PartitionServiceDeleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the partition to get
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceDeleteRequest) Reset() {
	*x = PartitionServiceDeleteRequest{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceDeleteRequest) ProtoMessage() {}

func (x *PartitionServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*PartitionServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{2}
}

func (x *PartitionServiceDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PartitionServiceCreateResponse is the response payload for a partition create request
type PartitionServiceCreateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition the partition
	Partition     *v1.Partition `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceCreateResponse) Reset() {
	*x = PartitionServiceCreateResponse{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceCreateResponse) ProtoMessage() {}

func (x *PartitionServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*PartitionServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{3}
}

func (x *PartitionServiceCreateResponse) GetPartition() *v1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

// PartitionServiceUpdateResponse is the response payload for a partition update request
type PartitionServiceUpdateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition the partition
	Partition     *v1.Partition `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceUpdateResponse) Reset() {
	*x = PartitionServiceUpdateResponse{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceUpdateResponse) ProtoMessage() {}

func (x *PartitionServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*PartitionServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{4}
}

func (x *PartitionServiceUpdateResponse) GetPartition() *v1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

// PartitionServiceCapacityResponse is the response payload for a partition delete request
type PartitionServiceDeleteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition the partition
	Partition     *v1.Partition `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionServiceDeleteResponse) Reset() {
	*x = PartitionServiceDeleteResponse{}
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServiceDeleteResponse) ProtoMessage() {}

func (x *PartitionServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metalstack_admin_v1_partition_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*PartitionServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_metalstack_admin_v1_partition_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionServiceDeleteResponse) GetPartition() *v1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

var File_metalstack_admin_v1_partition_proto protoreflect.FileDescriptor

var file_metalstack_admin_v1_partition_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x1d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x02, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x03, 0x52,
	0x09, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x6e, 0x74,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x54, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x3b, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48,
	0x07, 0x72, 0x05, 0x10, 0x02, 0x18, 0x80, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x1e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x80, 0x03, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05,
	0xd2, 0xf3, 0x18, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0xd2, 0xf3, 0x18, 0x01, 0x01, 0x12,
	0x78, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x05, 0xd2, 0xf3, 0x18, 0x01, 0x01, 0x42, 0xd2, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x13, 0x4d, 0x65, 0x74, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x13, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_metalstack_admin_v1_partition_proto_rawDescOnce sync.Once
	file_metalstack_admin_v1_partition_proto_rawDescData []byte
)

func file_metalstack_admin_v1_partition_proto_rawDescGZIP() []byte {
	file_metalstack_admin_v1_partition_proto_rawDescOnce.Do(func() {
		file_metalstack_admin_v1_partition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metalstack_admin_v1_partition_proto_rawDesc), len(file_metalstack_admin_v1_partition_proto_rawDesc)))
	})
	return file_metalstack_admin_v1_partition_proto_rawDescData
}

var file_metalstack_admin_v1_partition_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_metalstack_admin_v1_partition_proto_goTypes = []any{
	(*PartitionServiceCreateRequest)(nil),  // 0: metalstack.admin.v1.PartitionServiceCreateRequest
	(*PartitionServiceUpdateRequest)(nil),  // 1: metalstack.admin.v1.PartitionServiceUpdateRequest
	(*PartitionServiceDeleteRequest)(nil),  // 2: metalstack.admin.v1.PartitionServiceDeleteRequest
	(*PartitionServiceCreateResponse)(nil), // 3: metalstack.admin.v1.PartitionServiceCreateResponse
	(*PartitionServiceUpdateResponse)(nil), // 4: metalstack.admin.v1.PartitionServiceUpdateResponse
	(*PartitionServiceDeleteResponse)(nil), // 5: metalstack.admin.v1.PartitionServiceDeleteResponse
	(*v1.Partition)(nil),                   // 6: metalstack.api.v1.Partition
	(*v1.PartitionBootConfiguration)(nil),  // 7: metalstack.api.v1.PartitionBootConfiguration
	(*v1.DNSServer)(nil),                   // 8: metalstack.api.v1.DNSServer
	(*v1.NTPServer)(nil),                   // 9: metalstack.api.v1.NTPServer
}
var file_metalstack_admin_v1_partition_proto_depIdxs = []int32{
	6,  // 0: metalstack.admin.v1.PartitionServiceCreateRequest.partition:type_name -> metalstack.api.v1.Partition
	7,  // 1: metalstack.admin.v1.PartitionServiceUpdateRequest.boot_configuration:type_name -> metalstack.api.v1.PartitionBootConfiguration
	8,  // 2: metalstack.admin.v1.PartitionServiceUpdateRequest.dns_server:type_name -> metalstack.api.v1.DNSServer
	9,  // 3: metalstack.admin.v1.PartitionServiceUpdateRequest.ntp_server:type_name -> metalstack.api.v1.NTPServer
	6,  // 4: metalstack.admin.v1.PartitionServiceCreateResponse.partition:type_name -> metalstack.api.v1.Partition
	6,  // 5: metalstack.admin.v1.PartitionServiceUpdateResponse.partition:type_name -> metalstack.api.v1.Partition
	6,  // 6: metalstack.admin.v1.PartitionServiceDeleteResponse.partition:type_name -> metalstack.api.v1.Partition
	0,  // 7: metalstack.admin.v1.PartitionService.Create:input_type -> metalstack.admin.v1.PartitionServiceCreateRequest
	1,  // 8: metalstack.admin.v1.PartitionService.Update:input_type -> metalstack.admin.v1.PartitionServiceUpdateRequest
	2,  // 9: metalstack.admin.v1.PartitionService.Delete:input_type -> metalstack.admin.v1.PartitionServiceDeleteRequest
	3,  // 10: metalstack.admin.v1.PartitionService.Create:output_type -> metalstack.admin.v1.PartitionServiceCreateResponse
	4,  // 11: metalstack.admin.v1.PartitionService.Update:output_type -> metalstack.admin.v1.PartitionServiceUpdateResponse
	5,  // 12: metalstack.admin.v1.PartitionService.Delete:output_type -> metalstack.admin.v1.PartitionServiceDeleteResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_metalstack_admin_v1_partition_proto_init() }
func file_metalstack_admin_v1_partition_proto_init() {
	if File_metalstack_admin_v1_partition_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metalstack_admin_v1_partition_proto_rawDesc), len(file_metalstack_admin_v1_partition_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metalstack_admin_v1_partition_proto_goTypes,
		DependencyIndexes: file_metalstack_admin_v1_partition_proto_depIdxs,
		MessageInfos:      file_metalstack_admin_v1_partition_proto_msgTypes,
	}.Build()
	File_metalstack_admin_v1_partition_proto = out.File
	file_metalstack_admin_v1_partition_proto_goTypes = nil
	file_metalstack_admin_v1_partition_proto_depIdxs = nil
}
